# AgentCores Enterprise Platform - Docker Compose Configuration
# Built for MVP simplicity, designed for billion-dollar platform scale

services:


  # PostgreSQL Organizations Database
  postgres-orgs:
    image: postgres:latest
    environment:
      POSTGRES_DB: agentcores_orgs
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_db_password_change_in_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
    volumes:
      - postgres_orgs_data:/var/lib/postgresql/data
      - ./backend/scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    # ports:
    #   - "5434:5432"  # SECURITY: Removed external access
    expose:
      - "5432"  # Internal container access only
    networks:
      - database_network  # SECURITY: Isolated database network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d agentcores_orgs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # PostgreSQL Individuals Database  
  postgres-individuals:
    image: postgres:latest
    environment:
      POSTGRES_DB: agentcores_individuals
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_db_password_change_in_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
    volumes:
      - postgres_individuals_data:/var/lib/postgresql/data
      - ./backend/scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    # ports:
    #   - "5433:5432"  # SECURITY: Removed external access
    expose:
      - "5432"  # Internal container access only
    networks:
      - database_network  # SECURITY: Isolated database network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d agentcores_individuals"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis - Enterprise Caching & Message Queue
  redis:
    image: redis:latest
    environment:
      # Enterprise Redis configuration
      REDIS_MAXMEMORY: 512mb
      REDIS_MAXMEMORY_POLICY: allkeys-lru
    # ports:
    #   - "${REDIS_PORT:-6379}:6379"  # SECURITY: Removed external access
    expose:
      - "6379"  # Internal container access only
    networks:
      - database_network  # SECURITY: Isolated network access
    volumes:
      - redis_data:/data
      - ./backend/config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API - Enterprise Application Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Multi-Database Configuration - SECURITY: Use environment variables
      - ORG_DATABASE_URL=postgresql://agent_user:${DB_PASSWORD:-secure_db_password_change_in_production}@postgres-orgs:5432/agentcores_orgs
      - INDIVIDUAL_DATABASE_URL=postgresql://agent_user:${DB_PASSWORD:-secure_db_password_change_in_production}@postgres-individuals:5432/agentcores_individuals
      - REDIS_URL=redis://redis:6379/0
      
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - APP_NAME=AgentCores Enterprise
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Security Configuration - SECURITY: Strong default key
      - SECRET_KEY=${JWT_SECRET:-enterprise-secure-jwt-key-min-32-chars-change-in-production-2025}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=${TOKEN_EXPIRE_MINUTES:-480}
      
      # AI Provider Configuration
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - OPENROUTER_SITE_URL=${OPENROUTER_SITE_URL:-https://agentcores.com}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      
      # Enterprise Features
      - FEATURE_MULTI_TENANCY=${FEATURE_MULTI_TENANCY:-true}
      - FEATURE_ANALYTICS=${FEATURE_ANALYTICS:-true}
      - FEATURE_COST_TRACKING=${FEATURE_COST_TRACKING:-true}
      - FEATURE_MULTI_PROVIDER=${FEATURE_MULTI_PROVIDER:-true}
      
      # Monitoring & Observability
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - HEALTH_CHECK_ENABLED=${HEALTH_CHECK_ENABLED:-true}
      - AUDIT_LOGGING=${AUDIT_LOGGING:-true}
      
      # Multi-tenancy Configuration
      - DEFAULT_TENANT_ID=${DEFAULT_TENANT_ID:-default}
      - DEFAULT_MAX_AGENTS=${DEFAULT_MAX_AGENTS:-10}
      - DEFAULT_MAX_TASKS_PER_HOUR=${DEFAULT_MAX_TASKS_PER_HOUR:-1000}
      - DEFAULT_MAX_MONTHLY_COST=${DEFAULT_MAX_MONTHLY_COST:-1000.0}
      
      # Task Execution Configuration
      - MAX_CONCURRENT_TASKS=${MAX_CONCURRENT_TASKS:-10}
      - TASK_TIMEOUT_SECONDS=${TASK_TIMEOUT_SECONDS:-300}
      - MAX_TASK_RETRIES=${MAX_TASK_RETRIES:-3}
      
      # Cost Management
      - COST_TRACKING_ENABLED=${COST_TRACKING_ENABLED:-true}
      - MONTHLY_COST_ALERT_THRESHOLD=${MONTHLY_COST_ALERT_THRESHOLD:-800.0}
      - DAILY_COST_ALERT_THRESHOLD=${DAILY_COST_ALERT_THRESHOLD:-50.0}
      
    depends_on:
      postgres-orgs:
        condition: service_healthy
      postgres-individuals:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentcores_network  # Access to internet for AI APIs
      - database_network    # Access to databases
    volumes:
      # Development: Mount source code for hot reload
      - ./backend:/app
      - /app/venv  # Exclude virtual environment
      - /app/__pycache__  # Exclude Python cache
    command: >
      sh -c "
        echo 'üè¢ Starting AgentCores Enterprise Backend...' &&
        python -c 'from app.database import validate_startup_configuration; validate_startup_configuration()' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level info
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Frontend Web App - Enterprise UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      # API Configuration
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000/ws}
      
      # Application Configuration  
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-development}
      - REACT_APP_VERSION=${APP_VERSION:-1.0.0}
      - REACT_APP_NAME=AgentCores Enterprise
      
      # Development Configuration
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
      - WDS_SOCKET_PORT=0
      
      # Enterprise Features
      - REACT_APP_FEATURE_MULTI_TENANCY=${FEATURE_MULTI_TENANCY:-true}
      - REACT_APP_FEATURE_ANALYTICS=${FEATURE_ANALYTICS:-true}
      - REACT_APP_FEATURE_COST_TRACKING=${FEATURE_COST_TRACKING:-true}
      
    depends_on:
      - backend
    volumes:
      # Development: Mount source code for hot reload
      - ./frontend:/app
      - /app/node_modules  # Exclude node_modules
    stdin_open: true
    tty: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx Reverse Proxy - Enterprise Gateway
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    profiles:
      - production

  # Enterprise Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring
      - production

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring
      - production

volumes:
  postgres_orgs_data:
    driver: local
  postgres_individuals_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Enterprise Networks - SECURITY: Isolated network with restricted access
networks:
  agentcores_network:
    driver: bridge
    internal: false  # Allow internet access for API calls
    ipam:
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1
  database_network:
    driver: bridge  
    internal: true   # SECURITY: Database network isolated from internet
    ipam:
      config:
        - subnet: 172.26.0.0/16

# Enterprise Configuration Examples
# 
# Development:
#   docker-compose up
#
# Testing (CI/CD):
#   docker-compose --profile testing up -d
#
# Production:
#   docker-compose --profile production up -d
#
# With Monitoring:
#   docker-compose --profile monitoring up -d
#
# Full Enterprise:
#   docker-compose --profile production --profile monitoring up -d